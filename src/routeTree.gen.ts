/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SettingsImport } from './routes/settings'
import { Route as ReportsImport } from './routes/reports'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as GoalsImport } from './routes/goals'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as GoalsIndexImport } from './routes/goals/index'
import { Route as GoalsAddGoalImport } from './routes/goals/addGoal'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const GoalsRoute = GoalsImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRoute,
} as any)

const GoalsIndexRoute = GoalsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GoalsRoute,
} as any)

const GoalsAddGoalRoute = GoalsAddGoalImport.update({
  id: '/addGoal',
  path: '/addGoal',
  getParentRoute: () => GoalsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/goals/addGoal': {
      id: '/goals/addGoal'
      path: '/addGoal'
      fullPath: '/goals/addGoal'
      preLoaderRoute: typeof GoalsAddGoalImport
      parentRoute: typeof GoalsImport
    }
    '/goals/': {
      id: '/goals/'
      path: '/'
      fullPath: '/goals/'
      preLoaderRoute: typeof GoalsIndexImport
      parentRoute: typeof GoalsImport
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeImport
    }
  }
}

// Create and export the route tree

interface GoalsRouteChildren {
  GoalsAddGoalRoute: typeof GoalsAddGoalRoute
  GoalsIndexRoute: typeof GoalsIndexRoute
}

const GoalsRouteChildren: GoalsRouteChildren = {
  GoalsAddGoalRoute: GoalsAddGoalRoute,
  GoalsIndexRoute: GoalsIndexRoute,
}

const GoalsRouteWithChildren = GoalsRoute._addFileChildren(GoalsRouteChildren)

interface HomeRouteChildren {
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/goals': typeof GoalsRouteWithChildren
  '/home': typeof HomeRouteWithChildren
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/goals/addGoal': typeof GoalsAddGoalRoute
  '/goals/': typeof GoalsIndexRoute
  '/home/': typeof HomeIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/goals/addGoal': typeof GoalsAddGoalRoute
  '/goals': typeof GoalsIndexRoute
  '/home': typeof HomeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/goals': typeof GoalsRouteWithChildren
  '/home': typeof HomeRouteWithChildren
  '/login': typeof LoginRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/goals/addGoal': typeof GoalsAddGoalRoute
  '/goals/': typeof GoalsIndexRoute
  '/home/': typeof HomeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/goals'
    | '/home'
    | '/login'
    | '/reports'
    | '/settings'
    | '/signup'
    | '/goals/addGoal'
    | '/goals/'
    | '/home/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/login'
    | '/reports'
    | '/settings'
    | '/signup'
    | '/goals/addGoal'
    | '/goals'
    | '/home'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/goals'
    | '/home'
    | '/login'
    | '/reports'
    | '/settings'
    | '/signup'
    | '/goals/addGoal'
    | '/goals/'
    | '/home/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  GoalsRoute: typeof GoalsRouteWithChildren
  HomeRoute: typeof HomeRouteWithChildren
  LoginRoute: typeof LoginRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  GoalsRoute: GoalsRouteWithChildren,
  HomeRoute: HomeRouteWithChildren,
  LoginRoute: LoginRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/goals",
        "/home",
        "/login",
        "/reports",
        "/settings",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/goals": {
      "filePath": "goals.tsx",
      "children": [
        "/goals/addGoal",
        "/goals/"
      ]
    },
    "/home": {
      "filePath": "home.tsx",
      "children": [
        "/home/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/reports": {
      "filePath": "reports.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/goals/addGoal": {
      "filePath": "goals/addGoal.tsx",
      "parent": "/goals"
    },
    "/goals/": {
      "filePath": "goals/index.tsx",
      "parent": "/goals"
    },
    "/home/": {
      "filePath": "home/index.tsx",
      "parent": "/home"
    }
  }
}
ROUTE_MANIFEST_END */
